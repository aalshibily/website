@page "/randomjoke"
@inject IHttpClientFactory ClientFactory

<h3>Random Joke</h3>
<p>
    This section focuses on calling an API that is triggered using an action/event
    <br />Pre-comiled source is <a href="https://github.com/aalshibily/website/blob/main/Pages/RandomJoke.razor" target="_blank">here</a>! <em>Note: Opens in new tab!</em>
</p>
<p>Click <strong @onclick="() => TechInfoHidden = !TechInfoHidden">here</strong> for more technical info</p>

<p class="@(TechInfoHidden ? "hideInfo" : string.Empty)">
    All the code is written in C# and .NET which is then compiled to WebAssembly.
    <br />Pretty neat as it allows backend and frontend logic to be written using the same .NET code and C#.
    <br />Similar to the Fetch Data section, it utilizes C# HttpClient but this time to call an external API and parse the data using (.NET) objects.
    <br />The repo and documentation for the API used on this page is <a href="https://github.com/15Dkatz/official_joke_api" target="_blank">HERE</a> <em>Opens in new tab</em>
</p>
<br />

<div class="">
    <div class="form-group form-inline">
        <label fpr="selection" >Joke Type: </label>
        <select class="form-control" id="selection" @onchange="UpdateType">
            @foreach (string s in JokeTypes)
            {
                <option value="@s.ToLower()">@s</option>
            }
        </select>
    </div>
</div>

<div class="mt-1 mb-1">
    <label>Number of Jokes: </label>
    <div class="form-check form-check-inline">
        <input class="form-check-input" type="radio" name="singlejoke" id="one-joke" @onchange="() => { GetOneJoke = true; }" checked />
        <label class="form-check-label" for="one-joke">1 Joke</label>
    </div>
    <div class="form-check form-check-inline">
        <input class="form-check-input" type="radio" name="singlejoke" id="ten-jokes" @onchange="() => { GetOneJoke = false; }" />
        <label class="form-check-label" for="ten-jokes">10 Jokes</label>
    </div>
</div>

<button class="btn btn-primary mr-3 mb-3" @onclick="() => GetJoke()">Get @(GetOneJoke ? "joke" : "jokes")!</button>

@if (Jokes.Count == 0)
{
    //Render nothing
}
else
{
    foreach (Joke J in Jokes)
    {
        <BlazorStaticWebsite.Components.SingleJoke Joke="J" EvenRow="Jokes.IndexOf(J) % 2 == 0" />
    }
}

<style>
    .hideInfo {
        visibility: hidden;
    }
</style>

@code
{
    private string JokeType;
    private bool GetOneJoke;

    private bool TechInfoHidden = true;

    public List<Joke> Jokes = new List<Joke>();

    private HttpClient Http;

    private string[] JokeTypes = { "Random", "Programming", "Knock-knock", "General" };

    protected override void OnInitialized()
    {
        //Initial Page State and Variables
        Http = ClientFactory.CreateClient("Joke");
        JokeType = JokeTypes[0].ToLower();
        GetOneJoke = true;
    }

    private async Task GetJoke()
    {
        //Clear out current joke(s)
        Jokes.Clear();

        //Get new joke(s)
        if (GetOneJoke)
        {
            await GetSingleJoke();
        }
        else
        {
            await GetTenJokes();
        }
    }

    private async Task GetSingleJoke()
    {
        var type = JokeType.ToLower();

        string request = type == "random" ? "/jokes/random" : $"/jokes/{type}/random";

        var result = await Http.GetStringAsync(request);

        //The API has inconsistent behavior with the returned JSON format, this is a temporary workaround until it's fixed
        //Will check when it gets fixed https://github.com/15Dkatz/official_joke_api/issues/70
        result = result.Trim(new char[] { '[', ']' });

        var joke = JsonConvert.DeserializeObject<Joke>(result);

        Jokes.Add(joke);
    }

    private async Task GetTenJokes()
    {
        var type = JokeType.ToLower();

        string request = type == "random" ? "/jokes/ten" : $"/jokes/{type}/ten";

        var result = await Http.GetStringAsync(request);

        var joke = JsonConvert.DeserializeObject<IEnumerable<Joke>>(result);

        Jokes.AddRange(joke);
    }

    public void UpdateType(ChangeEventArgs e)
    {
        JokeType = e.Value.ToString();
    }
}