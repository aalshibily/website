@page "/fetchdata"
@inject IHttpClientFactory ClientFactory

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a local JSON file hosted on the repo/filesystem.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>

}
<br />

<p>
    Boiler plate code that comes with the project by default. It demonstrates the ability of Blazor to use a C# HttpClient to get and serve a local JSON file, good for serving static data/content.
    <br />Pre-comiled source is <a href="https://github.com/aalshibily/website/blob/main/Pages/FetchData.razor" target="_blank">here</a>! <em>Note: Opens in new tab!</em>
</p>

@code {
    private WeatherForecast[] forecasts;

    protected override async Task OnInitializedAsync()
    {
        var Http = ClientFactory.CreateClient("Default");

        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("sample-data/weather.json");
    }

    public class WeatherForecast
    {
        public DateTime Date { get; set; }

        public int TemperatureC { get; set; }

        public string Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
